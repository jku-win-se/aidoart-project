,Authors,Author full names,Author(s) ID,Title,Year,Source title,Volume,Issue,Art. No.,Page start,Page end,Page count,Cited by,DOI,Link,Affiliations,Authors with affiliations,Abstract,Author Keywords,Index Keywords,Molecular Sequence Numbers,Chemicals/CAS,Tradenames,Manufacturers,Funding Details,Funding Texts,References,Correspondence Address,Editors,Publisher,Sponsors,Conference name,Conference date,Conference location,Conference code,ISSN,ISBN,CODEN,PubMed ID,Language of Original Document,Abbreviated Source Title,Document Type,Publication Stage,Open Access,Source,EID
0,,"Rademacher F. (AUID: 57015087900), Sorgalla J. (AUID: 57194283105), Wizenty P. (AUID: 57199279170), Sachweh S. (AUID: 54912166300), Zündorf A. (AUID: 56000503100)",,Graphical and textual model-driven microservice development,2019,Microservices: Science and Engineering,,,,,,,18,10.1007/978-3-030-31646-4_7,https://www.doi.org/10.1007/978-3-030-31646-4_7,"<IDiAL Institute, University of Applied Sciences and Arts Dortmund>, <Department of Computer Science and Electrical Engineering, University of Kassel>",,"© Springer Nature Switzerland AG 2020.Model-driven development (MDD) is an approach to software engineering that aims to enable analysis, validation, and code generation of software on the basis of models expressed with dedicated modeling languages. MDD is particularly useful in the engineering of complex, possibly distributed software systems. It is therefore sensible to investigate the adoption of MDD to support and facilitate the engineering of distributed software systems based on microservice architecture (MSA). This chapter presents recent insights from studying and developing two approaches for employing MDD in MSA engineering. The first approach uses a graphical notation to model the topology and interactions of MSA-based software systems. The second approach emerged from the first one and exploits viewpoint-based modeling to better cope with MSA’s inherent complexity. It also considers the distributed nature of MSA teams, as well as the technology heterogeneity introduced by MSA adoption. Both approaches are illustrated and discussed in the context of a case study. Moreover, we present a catalog of research questions for subsequent investigation of employing MDD to support and facilitate MSA engineering.","Metamodeling, Microservice architecture, Model-driven development, Modeling languages, Software architecture, Software design",,,,,,,,"<Infrastructure-as-code for data-intensive architectures: A model-driven development approach, {eid: 85051103640}>, <Microservices architecture enables DevOps: Migration to a cloud-native architecture, {eid: 84968796741}>, <None, {eid: 0004025223}>, <Towards integrating microservices with adaptable enterprise architecture, {eid: 84992626303}>, <Microservices in industry: Insights into technologies, characteristics, and software quality, {eid: 85066486037}>, <None, {eid: 85023646999}>, <None, {eid: 85054938535}>, <Model-driven generation of microservice architectures for benchmarking performance and resilience engineering approaches, {eid: 85019479213}>, <None, {eid: 4644300495}>, <None, {eid: 2942742234}>, <Model-driven development of complex software: A research roadmap, {eid: 34748861160}>, <Collaborative model-driven software engineering: A classification framework and a research map, {eid: 85030632465}>, <Classification of concrete textual syntax mapping approaches, {eid: 70349852882}>, <None, {eid: 0003518498}>, <Towards recovering the software architecture of microservice-based systems, {eid: 85025689600}>, <The hidden dividends of microservices, {eid: 84976307780}>, <Investigation of impacts on network performance in the advance of a microservice design, {eid: 85024389666}>, <Model transformation intents and their properties, {eid: 84904275821}>, <Models in software engineering-an introduction, {eid: 14244260708}>, <Comparison of a textual versus a graphical notation for the maintainability of MDE domain models: An empirical pilot study, {eid: 84949748738}>, <None, {eid: 84908871569}>, <None, {eid: 85010410859}>, <None, {eid: 84950338538}>, <None, {eid: 84870676587}>, <None, {eid: 0013137299}>, <None, {eid: 84886743417}>, <None, {eid: 85118523856}>, <Why looking isn’t always seeing: Readership skills and graphical programming, {eid: 0029327901}>, <Challenges of domain-driven microservice design: A model-driven perspective, {eid: 85046890847}>, <Microservice architecture and model-driven development: Yet singles, soon married (?), {eid: 85058570602}>, <Aspect-oriented modeling of technology heterogeneity in microservice architecture, {eid: 85065789976}>, <A model-driven workflow for distributed microservice development, {eid: 85065640931}>, <Viewpoint-specific model-driven microservice development with interlinked modeling languages, {eid: 85065782256}>, <None, {eid: 85010958676}>, <All the services large and micro: Revisiting industrial practice in services computing, {eid: 84964803678}>, <Ajil: Enabling model-driven microservice development, {eid: 85055702323}>, <None, {eid: 74549142762}>, <On the definition of microservice bad smells, {eid: 85046708734}>, <None, {eid: 85044973439}>, <The state of practice in model-driven engineering, {eid: 84899687758}>",,,Springer International Publishing,,,2019-01-01,,,,,,,eng,,Book,,,,2-s2.0-85086303989
1,,"Ferry N. (AUID: 35291975700), Song H. (AUID: 57195274282), Dautov R. (AUID: 56626911600), Nguyen P. (AUID: 55646510700), Chauvel F. (AUID: 13104917300)",,Model-based Continuous Deployment of SIS,2021,Devops for Trustworthy Smart Iot Systems,,,,,,,0,10.1561/9781680838251.ch4,https://www.doi.org/10.1561/9781680838251.ch4,"<Université Cote d’Azur, I3S/INRIA>, <SINTEF Digital>",,,,,,,,,,,"<Understanding the software communications architecture, {eid: 70350324202}>, <Satisfiability modulo theories: An efficient approach for the resource-constrained project scheduling problem, {eid: 85139652424}>, <Model-driven continuous deployment for quality devops, {eid: 85054816400}>, <None, {eid: 0004025223}>, <The Multiple Facets of Software Diversity: RecentDevelopments in Year 2000 and Beyond, {eid: 84945937656, doi: 10.1145/2807593}>, <Models@run.time, {eid: 85008066028}>, <Solving constraint satisfaction problems with SAT modulo theories, {eid: 84865267600}>, <Satisfiability modulo theories and assignments, {eid: 85026756975}>, <Exploiting multi-level modelling for designing and deploying gameful systems, {eid: 85076095969}>, <D-lite: Distributed logic for internet of things services, {eid: 84857617841}>, <A Standard-Based Open Source IoT Platform: FIWARE, {eid: 85086591264, doi: 10.1109/IOTM.0001.1800022}>, <Towards a Model-Based DevOps for Cyber-Physical Systems, {eid: 85096956543}>, <Towards AgileManagement of Containerised Software at the Edge, {eid: 85098731119}>, <Towards IoT Diversity via Automated Fleet Management, {eid: 85072774564}>, <A Light-Weight Approach to Software Assignment at the Edge, {eid: 85099568584}>, <Bringing DSE to life: Exploring the design space of an industrial automotive use case, {eid: 85040592290}>, <From deployment to platform exploration: Automatic synthesis of distributed automotive hardware architectures, {eid: 85054797688}>, <Towards Model-Based Continuous Deployment of Secure IoT Systems, {eid: 85075910586}>, <CloudMF: Model-Driven Management of Multi-Cloud Applications, {eid: 85041437398}>, <Continuous Deployment of Trustworthy Smart IoT Systems, {eid: 85089665982}>, <Genesis: Continuous orchestration and deployment of smart IoT systems, {eid: 85072692587}>, <Evaluating Critical Security Issues of the IoTWorld: Present and Future Challenges, {eid: 85032723989, doi: 10.1109/JIOT.2017.2767291}>, <Making the Internet of Things More Reliable Thanks to Dynamic Access Control, {eid: 85139685846}>, <Developing IoT applications in the fog: A distributed dataflow approach, {eid: 84962284412}>, <Deployment and Configuration of Component-based Distributed Applications Specification, {eid: 85139638482}>, <ThingML: A Language and Code Generation Framework for Heterogeneous Targets, {eid: 85008457888}>, <A generic service oriented software platform to design ambient intelligent systems, {eid: 84962524282}>, <Calvin Constrained-A Framework for IoT Applications in Heterogeneous Environments, {eid: 85027276378}>, <Engineering software diversity: A model-based approach to systematically diversify communications, {eid: 85056814752}>, <DevSecOps: A Multivocal Literature Review, {eid: 85029742916}>, <None, {eid: 85067431815}>, <SoSPa: A system of Security design Patterns for Systematically engineering secure systems, {eid: 84961642292, doi: 10.1109/MODELS.2015.7338255}>, <A Security Policy Enforcement Framework for Controlling IoT Tenant Applications in the Edge, {eid: 85139630379}>, <Advances in deployment and orchestration approaches for IoT - A systematic review, {eid: 85072691780}>, <An extensive systematic review on the Model-Driven Development of Secure Systems, {eid: 84942611940}>, <Towards a Smart Applications Development Framework, {eid: 85089682565}>, <None, {eid: 24344495942}>, <A survey of the generalized assignment problem and its applications, {eid: 45749151027}>, <A conceptual foundation for component-based software deployment, {eid: 0035878887}>, <Assignment problems: A golden anniversary survey, {eid: 33749569898}>, <Chariot: Goal-driven orchestration middleware for resilient IoT systems, {eid: 85067935788}>, <None, {eid: 85028730621}>, <OpenTOSCA for IoT: Automating the deployment of IoT applications based on the mosquitto message broker, {eid: 85000926700}>, <Model-based fleet deployment of edge computing applications, {eid: 85097001114}>, <On architectural diversity of dynamic adaptive systems, {eid: 84951732317}>, <A scalable framework for provisioning large-scale IoT deployments, {eid: 84963811933}>, <Energy-efficient resource allocation for mobile-edge computation offloading, {eid: 85015263422}>",,,Now Publishers,,,2021-01-01,,,,,,,eng,,Book,,,,2-s2.0-85139627940
2,,"Lantz J. (AUID: 56487324500), Eliasson U. (AUID: 56487816900)",,Scaling agile mechatronics: An industrial case study,2014,Continuous software engineering,,,,,,,1,10.1007/978-3-319-11283-1_17,https://www.doi.org/10.1007/978-3-319-11283-1_17,<Volvo Car Group>,,"© 2014 Springer International Publishing Switzerland. All rights reserved.The automotive industry is currently in a state of rapid change. The traditional mechanical industry has, forced by electronic revolution and global threats of climate change, transformed into a computerized electromechanical industry. A hybrid or electric car of 2013 can have, in the order of 100 electronic control units, running gigabytes of code, working together in a complex network within the car as well as being connected to networks in the world outside. This exponential increase of software has posed new challenges for the R&D organizations. In many cases the commonly used method of requirement engineering towards external suppliers in a waterfall process has shown to be unmanageable. Part of the solution has been to introduce more in-house software development and the new standardized platform for embedded software, AUTOSAR. During the past few years, Volvo Cars has focused on techniques and processes for continuous integration of embedded software for active safety, body functions, and motor and hybrid technology. The feedback times for ECU system test have decreased from months to, in the best cases, hours. Domain-specific languages (DSL), for both software and physical models, have been used to great extent when developing in-house embedded software at Volvo Cars. The main reasons are the close connection with mechatronic systems (motors, powertrain, servos, etc.), the advantage of having domain experts (not necessarily software experts) developing control software, and the facilitated reuse of algorithms. Model-driven engineering also provides a method for agile development and early learning in projects where hardware and mechanics usually are available only late. Model-based testing of the software is performed, both as pure simulation (MIL) and in hardware-in-the-loop (HIL) rigs, before it is deployed in real cars. This testing is currently being automated for several rigs, as part of the continuous integration strategy. The progress is, however, not without challenges. Details of the work split with Tier 1 suppliers, using the young AUTOSAR standard, and the efficiency of AUTOSAR code are still open problems. Another challenge is to manage the complex model framework required for virtual verification when applied on system level and numerous DSLs have to be executed together.",,,,,,,,,"<None, {eid: 85025583418}>, <None, {eid: 85025606032}>, <None, {eid: 85025689773}>, <None, {eid: 77954495643}>, <Embedded software: Facts, figures, and future, {eid: 65749098082}>, <Archetypical approaches of fast software development and slow embedded projects, {eid: 84889005076}>, <Extending agile practices in automotive MDE, {eid: 84923852912}>, <Agile model-driven engineering in mechatronic systems -an industrial case study (2014), {eid: 84921391979}>, <AUTOSAR-A worldwide standard is on the road, {eid: 79751532776}>, <A light-weight defect classification scheme for embedded automotive software and its initial evaluation, {eid: 84876399424}>",,,Springer International Publishing,,,2014-08-01,,,,,,,eng,,Book,,,,2-s2.0-84930695275
3,,"Ferry N. (AUID: 35291975700), Solberg A. (AUID: 14827375100)",,Models@runtime for continuous design and deployment,2017,SpringerBriefs in Applied Sciences and Technology,,,,,,,3,10.1007/978-3-319-46031-4_9,https://www.doi.org/10.1007/978-3-319-46031-4_9,<Stiftelsen SINTEF>,,"© The Author(s) 2017.Nowadays, software systems are leveraging upon an aggregation of dedicated infrastructures and platforms, which leads to the design of large scale, distributed, and dynamic systems. The need to evolve and update such systems after delivery is often inevitable, for example, due to changes in the requirements, maintenance, or needs for advancing the quality of services such as scalability and performances.",,,,,,,,,"<None, {eid: 84887309406}>, <None, {eid: 84858197925}>, <Continuous software engineering and beyond: Trends and challenges, {eid: 84942514935}>, <Consuming resources and services from multiple clouds, {eid: 84904958872}>, <MODACLOUDS, a model-driven approach for the design and execution of applications on multiple clouds, {eid: 84864997201}>, <Models@run.Time, {eid: 85008066028}>, <None, {eid: 85028730621}>, <Models@Run.Time to support dynamic adaptation, {eid: 70350345225}>, <None, {eid: 84946685259}>, <None, {eid: 84886743417}>, <PaaS-independent provisioning and management of applications in the cloud, {eid: 84897744190}>, <None, {eid: 85028707875}>, <CloudScale: Scalability management for cloud systems, {eid: 84878201490}>, <The reservoir model and architecture for open federated cloud computing, {eid: 74049087607}>, <A runtime model based monitoring approach for cloud, {eid: 77957948402}>",,,Springer Verlag,,,2017-01-01,,,,,,,eng,,Book Series,,,,2-s2.0-85028707045
